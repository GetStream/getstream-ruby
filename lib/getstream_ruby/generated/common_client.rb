# frozen_string_literal: true

# Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

# Load all models at once
Dir[File.join(__dir__, "models", "*.rb")].sort.each { |file| require_relative file }

module GetStream
  module Generated
    # Common API client with generated methods
    class CommonClient < GetStreamRuby::Client
      # This Method returns the application settings
      #
      # @return [GetStream::StreamResponse<GetApplicationResponse>]
      def get_app()
        path = '/api/v2/app'

        # Make the API request
        make_request(
          :get,
          path
        )
      end

      # This Method updates one or more application settings
      #
      # @param update_app_request [UpdateAppRequest]
      # @return [GetStream::StreamResponse<Response>]
      def update_app(update_app_request)
        path = '/api/v2/app'
        # Build request body
        body = update_app_request

        # Make the API request
        make_request(
          :patch,
          path,
          body: body
        )
      end

      # Returns all available block lists
      #
      # @param team [String]
      # @return [GetStream::StreamResponse<ListBlockListResponse>]
      def list_block_lists(team = nil)
        path = '/api/v2/blocklists'
        # Build query parameters
        query_params = {}
        query_params['team'] = team unless team.nil?

        # Make the API request
        make_request(
          :get,
          path,
          query_params: query_params
        )
      end

      # Creates a new application blocklist, once created the blocklist can be used by any channel type
      #
      # @param create_block_list_request [CreateBlockListRequest]
      # @return [GetStream::StreamResponse<CreateBlockListResponse>]
      def create_block_list(create_block_list_request)
        path = '/api/v2/blocklists'
        # Build request body
        body = create_block_list_request

        # Make the API request
        make_request(
          :post,
          path,
          body: body
        )
      end

      # Deletes previously created application blocklist
      #
      # @param name [String]
      # @param team [String]
      # @return [GetStream::StreamResponse<Response>]
      def delete_block_list(name, team = nil)
        path = '/api/v2/blocklists/{name}'
        # Replace path parameters
        path = path.gsub('{name}', name.to_s)
        # Build query parameters
        query_params = {}
        query_params['team'] = team unless team.nil?

        # Make the API request
        make_request(
          :delete,
          path,
          query_params: query_params
        )
      end

      # Returns block list by given name
      #
      # @param name [String]
      # @param team [String]
      # @return [GetStream::StreamResponse<GetBlockListResponse>]
      def get_block_list(name, team = nil)
        path = '/api/v2/blocklists/{name}'
        # Replace path parameters
        path = path.gsub('{name}', name.to_s)
        # Build query parameters
        query_params = {}
        query_params['team'] = team unless team.nil?

        # Make the API request
        make_request(
          :get,
          path,
          query_params: query_params
        )
      end

      # Updates contents of the block list
      #
      # @param name [String]
      # @param update_block_list_request [UpdateBlockListRequest]
      # @return [GetStream::StreamResponse<UpdateBlockListResponse>]
      def update_block_list(name, update_block_list_request)
        path = '/api/v2/blocklists/{name}'
        # Replace path parameters
        path = path.gsub('{name}', name.to_s)
        # Build request body
        body = update_block_list_request

        # Make the API request
        make_request(
          :put,
          path,
          body: body
        )
      end

      # Sends a test message via push, this is a test endpoint to verify your push settings
      #
      # @param check_push_request [CheckPushRequest]
      # @return [GetStream::StreamResponse<CheckPushResponse>]
      def check_push(check_push_request)
        path = '/api/v2/check_push'
        # Build request body
        body = check_push_request

        # Make the API request
        make_request(
          :post,
          path,
          body: body
        )
      end

      # Validates Amazon SNS configuration
      #
      # @param check_sns_request [CheckSNSRequest]
      # @return [GetStream::StreamResponse<CheckSNSResponse>]
      def check_sns(check_sns_request)
        path = '/api/v2/check_sns'
        # Build request body
        body = check_sns_request

        # Make the API request
        make_request(
          :post,
          path,
          body: body
        )
      end

      # Validates Amazon SQS credentials
      #
      # @param check_sqs_request [CheckSQSRequest]
      # @return [GetStream::StreamResponse<CheckSQSResponse>]
      def check_sqs(check_sqs_request)
        path = '/api/v2/check_sqs'
        # Build request body
        body = check_sqs_request

        # Make the API request
        make_request(
          :post,
          path,
          body: body
        )
      end

      # Deletes one device
      #
      # @param _id [String]
      # @param user_id [String]
      # @return [GetStream::StreamResponse<Response>]
      def delete_device(_id, user_id = nil)
        path = '/api/v2/devices'
        # Build query parameters
        query_params = {}
        query_params['id'] = _id unless _id.nil?
        query_params['user_id'] = user_id unless user_id.nil?

        # Make the API request
        make_request(
          :delete,
          path,
          query_params: query_params
        )
      end

      # Returns all available devices
      #
      # @param user_id [String]
      # @return [GetStream::StreamResponse<ListDevicesResponse>]
      def list_devices(user_id = nil)
        path = '/api/v2/devices'
        # Build query parameters
        query_params = {}
        query_params['user_id'] = user_id unless user_id.nil?

        # Make the API request
        make_request(
          :get,
          path,
          query_params: query_params
        )
      end

      # Adds a new device to a user, if the same device already exists the call will have no effect
      #
      # @param create_device_request [CreateDeviceRequest]
      # @return [GetStream::StreamResponse<Response>]
      def create_device(create_device_request)
        path = '/api/v2/devices'
        # Build request body
        body = create_device_request

        # Make the API request
        make_request(
          :post,
          path,
          body: body
        )
      end

      # Exports user profile, reactions and messages for list of given users
      #
      # @param export_users_request [ExportUsersRequest]
      # @return [GetStream::StreamResponse<ExportUsersResponse>]
      def export_users(export_users_request)
        path = '/api/v2/export/users'
        # Build request body
        body = export_users_request

        # Make the API request
        make_request(
          :post,
          path,
          body: body
        )
      end

      # Lists external storage
      #
      # @return [GetStream::StreamResponse<ListExternalStorageResponse>]
      def list_external_storage()
        path = '/api/v2/external_storage'

        # Make the API request
        make_request(
          :get,
          path
        )
      end

      # Creates new external storage
      #
      # @param create_external_storage_request [CreateExternalStorageRequest]
      # @return [GetStream::StreamResponse<CreateExternalStorageResponse>]
      def create_external_storage(create_external_storage_request)
        path = '/api/v2/external_storage'
        # Build request body
        body = create_external_storage_request

        # Make the API request
        make_request(
          :post,
          path,
          body: body
        )
      end

      # Deletes external storage
      #
      # @param name [String]
      # @return [GetStream::StreamResponse<DeleteExternalStorageResponse>]
      def delete_external_storage(name)
        path = '/api/v2/external_storage/{name}'
        # Replace path parameters
        path = path.gsub('{name}', name.to_s)

        # Make the API request
        make_request(
          :delete,
          path
        )
      end

      # 
      #
      # @param name [String]
      # @param update_external_storage_request [UpdateExternalStorageRequest]
      # @return [GetStream::StreamResponse<UpdateExternalStorageResponse>]
      def update_external_storage(name, update_external_storage_request)
        path = '/api/v2/external_storage/{name}'
        # Replace path parameters
        path = path.gsub('{name}', name.to_s)
        # Build request body
        body = update_external_storage_request

        # Make the API request
        make_request(
          :put,
          path,
          body: body
        )
      end

      # 
      #
      # @param name [String]
      # @return [GetStream::StreamResponse<CheckExternalStorageResponse>]
      def check_external_storage(name)
        path = '/api/v2/external_storage/{name}/check'
        # Replace path parameters
        path = path.gsub('{name}', name.to_s)

        # Make the API request
        make_request(
          :get,
          path
        )
      end

      # 
      #
      # @param create_guest_request [CreateGuestRequest]
      # @return [GetStream::StreamResponse<CreateGuestResponse>]
      def create_guest(create_guest_request)
        path = '/api/v2/guest'
        # Build request body
        body = create_guest_request

        # Make the API request
        make_request(
          :post,
          path,
          body: body
        )
      end

      # Creates a new import URL
      #
      # @param create_import_url_request [CreateImportURLRequest]
      # @return [GetStream::StreamResponse<CreateImportURLResponse>]
      def create_import_url(create_import_url_request)
        path = '/api/v2/import_urls'
        # Build request body
        body = create_import_url_request

        # Make the API request
        make_request(
          :post,
          path,
          body: body
        )
      end

      # Gets an import
      #
      # @return [GetStream::StreamResponse<ListImportsResponse>]
      def list_imports()
        path = '/api/v2/imports'

        # Make the API request
        make_request(
          :get,
          path
        )
      end

      # Creates a new import
      #
      # @param create_import_request [CreateImportRequest]
      # @return [GetStream::StreamResponse<CreateImportResponse>]
      def create_import(create_import_request)
        path = '/api/v2/imports'
        # Build request body
        body = create_import_request

        # Make the API request
        make_request(
          :post,
          path,
          body: body
        )
      end

      # Gets an import
      #
      # @param _id [String]
      # @return [GetStream::StreamResponse<GetImportResponse>]
      def get_import(_id)
        path = '/api/v2/imports/{id}'
        # Replace path parameters
        path = path.gsub('{id}', _id.to_s)

        # Make the API request
        make_request(
          :get,
          path
        )
      end

      # Get an OpenGraph attachment for a link
      #
      # @param url [String]
      # @return [GetStream::StreamResponse<GetOGResponse>]
      def get_og(url)
        path = '/api/v2/og'
        # Build query parameters
        query_params = {}
        query_params['url'] = url unless url.nil?

        # Make the API request
        make_request(
          :get,
          path,
          query_params: query_params
        )
      end

      # Lists all available permissions
      #
      # @return [GetStream::StreamResponse<ListPermissionsResponse>]
      def list_permissions()
        path = '/api/v2/permissions'

        # Make the API request
        make_request(
          :get,
          path
        )
      end

      # Gets custom permission
      #
      # @param _id [String]
      # @return [GetStream::StreamResponse<GetCustomPermissionResponse>]
      def get_permission(_id)
        path = '/api/v2/permissions/{id}'
        # Replace path parameters
        path = path.gsub('{id}', _id.to_s)

        # Make the API request
        make_request(
          :get,
          path
        )
      end

      # Creates a new poll
      #
      # @param create_poll_request [CreatePollRequest]
      # @return [GetStream::StreamResponse<PollResponse>]
      def create_poll(create_poll_request)
        path = '/api/v2/polls'
        # Build request body
        body = create_poll_request

        # Make the API request
        make_request(
          :post,
          path,
          body: body
        )
      end

      # Updates a pollSends events:- feeds.poll.closed- feeds.poll.updated- poll.closed- poll.updated
      #
      # @param update_poll_request [UpdatePollRequest]
      # @return [GetStream::StreamResponse<PollResponse>]
      def update_poll(update_poll_request)
        path = '/api/v2/polls'
        # Build request body
        body = update_poll_request

        # Make the API request
        make_request(
          :put,
          path,
          body: body
        )
      end

      # Queries polls
      #
      # @param query_polls_request [QueryPollsRequest]
      # @param user_id [String]
      # @return [GetStream::StreamResponse<QueryPollsResponse>]
      def query_polls(query_polls_request, user_id = nil)
        path = '/api/v2/polls/query'
        # Build query parameters
        query_params = {}
        query_params['user_id'] = user_id unless user_id.nil?
        # Build request body
        body = query_polls_request

        # Make the API request
        make_request(
          :post,
          path,
          query_params: query_params,
          body: body
        )
      end

      # Deletes a pollSends events:- feeds.poll.deleted- poll.deleted
      #
      # @param poll_id [String]
      # @param user_id [String]
      # @return [GetStream::StreamResponse<Response>]
      def delete_poll(poll_id, user_id = nil)
        path = '/api/v2/polls/{poll_id}'
        # Replace path parameters
        path = path.gsub('{poll_id}', poll_id.to_s)
        # Build query parameters
        query_params = {}
        query_params['user_id'] = user_id unless user_id.nil?

        # Make the API request
        make_request(
          :delete,
          path,
          query_params: query_params
        )
      end

      # Retrieves a poll
      #
      # @param poll_id [String]
      # @param user_id [String]
      # @return [GetStream::StreamResponse<PollResponse>]
      def get_poll(poll_id, user_id = nil)
        path = '/api/v2/polls/{poll_id}'
        # Replace path parameters
        path = path.gsub('{poll_id}', poll_id.to_s)
        # Build query parameters
        query_params = {}
        query_params['user_id'] = user_id unless user_id.nil?

        # Make the API request
        make_request(
          :get,
          path,
          query_params: query_params
        )
      end

      # Updates a poll partiallySends events:- feeds.poll.closed- feeds.poll.updated- poll.closed- poll.updated
      #
      # @param poll_id [String]
      # @param update_poll_partial_request [UpdatePollPartialRequest]
      # @return [GetStream::StreamResponse<PollResponse>]
      def update_poll_partial(poll_id, update_poll_partial_request)
        path = '/api/v2/polls/{poll_id}'
        # Replace path parameters
        path = path.gsub('{poll_id}', poll_id.to_s)
        # Build request body
        body = update_poll_partial_request

        # Make the API request
        make_request(
          :patch,
          path,
          body: body
        )
      end

      # Creates a poll optionSends events:- feeds.poll.updated- poll.updated
      #
      # @param poll_id [String]
      # @param create_poll_option_request [CreatePollOptionRequest]
      # @return [GetStream::StreamResponse<PollOptionResponse>]
      def create_poll_option(poll_id, create_poll_option_request)
        path = '/api/v2/polls/{poll_id}/options'
        # Replace path parameters
        path = path.gsub('{poll_id}', poll_id.to_s)
        # Build request body
        body = create_poll_option_request

        # Make the API request
        make_request(
          :post,
          path,
          body: body
        )
      end

      # Updates a poll optionSends events:- feeds.poll.updated- poll.updated
      #
      # @param poll_id [String]
      # @param update_poll_option_request [UpdatePollOptionRequest]
      # @return [GetStream::StreamResponse<PollOptionResponse>]
      def update_poll_option(poll_id, update_poll_option_request)
        path = '/api/v2/polls/{poll_id}/options'
        # Replace path parameters
        path = path.gsub('{poll_id}', poll_id.to_s)
        # Build request body
        body = update_poll_option_request

        # Make the API request
        make_request(
          :put,
          path,
          body: body
        )
      end

      # Deletes a poll optionSends events:- feeds.poll.updated- poll.updated
      #
      # @param poll_id [String]
      # @param option_id [String]
      # @param user_id [String]
      # @return [GetStream::StreamResponse<Response>]
      def delete_poll_option(poll_id, option_id, user_id = nil)
        path = '/api/v2/polls/{poll_id}/options/{option_id}'
        # Replace path parameters
        path = path.gsub('{poll_id}', poll_id.to_s)
        path = path.gsub('{option_id}', option_id.to_s)
        # Build query parameters
        query_params = {}
        query_params['user_id'] = user_id unless user_id.nil?

        # Make the API request
        make_request(
          :delete,
          path,
          query_params: query_params
        )
      end

      # Retrieves a poll option
      #
      # @param poll_id [String]
      # @param option_id [String]
      # @param user_id [String]
      # @return [GetStream::StreamResponse<PollOptionResponse>]
      def get_poll_option(poll_id, option_id, user_id = nil)
        path = '/api/v2/polls/{poll_id}/options/{option_id}'
        # Replace path parameters
        path = path.gsub('{poll_id}', poll_id.to_s)
        path = path.gsub('{option_id}', option_id.to_s)
        # Build query parameters
        query_params = {}
        query_params['user_id'] = user_id unless user_id.nil?

        # Make the API request
        make_request(
          :get,
          path,
          query_params: query_params
        )
      end

      # Queries votes
      #
      # @param poll_id [String]
      # @param query_poll_votes_request [QueryPollVotesRequest]
      # @param user_id [String]
      # @return [GetStream::StreamResponse<PollVotesResponse>]
      def query_poll_votes(poll_id, query_poll_votes_request, user_id = nil)
        path = '/api/v2/polls/{poll_id}/votes'
        # Replace path parameters
        path = path.gsub('{poll_id}', poll_id.to_s)
        # Build query parameters
        query_params = {}
        query_params['user_id'] = user_id unless user_id.nil?
        # Build request body
        body = query_poll_votes_request

        # Make the API request
        make_request(
          :post,
          path,
          query_params: query_params,
          body: body
        )
      end

      # Upserts the push preferences for a user and or channel member. Set to all, mentions or none
      #
      # @param upsert_push_preferences_request [UpsertPushPreferencesRequest]
      # @return [GetStream::StreamResponse<UpsertPushPreferencesResponse>]
      def update_push_notification_preferences(upsert_push_preferences_request)
        path = '/api/v2/push_preferences'
        # Build request body
        body = upsert_push_preferences_request

        # Make the API request
        make_request(
          :post,
          path,
          body: body
        )
      end

      # List details of all push providers.
      #
      # @return [GetStream::StreamResponse<ListPushProvidersResponse>]
      def list_push_providers()
        path = '/api/v2/push_providers'

        # Make the API request
        make_request(
          :get,
          path
        )
      end

      # Upsert a push provider for v2 with multi bundle/package support
      #
      # @param upsert_push_provider_request [UpsertPushProviderRequest]
      # @return [GetStream::StreamResponse<UpsertPushProviderResponse>]
      def upsert_push_provider(upsert_push_provider_request)
        path = '/api/v2/push_providers'
        # Build request body
        body = upsert_push_provider_request

        # Make the API request
        make_request(
          :post,
          path,
          body: body
        )
      end

      # Delete a push provider from v2 with multi bundle/package support. v1 isn't supported in this endpoint
      #
      # @param _type [String]
      # @param name [String]
      # @return [GetStream::StreamResponse<Response>]
      def delete_push_provider(_type, name)
        path = '/api/v2/push_providers/{type}/{name}'
        # Replace path parameters
        path = path.gsub('{type}', _type.to_s)
        path = path.gsub('{name}', name.to_s)

        # Make the API request
        make_request(
          :delete,
          path
        )
      end

      # Retrieve push notification templates for Chat.
      #
      # @param push_provider_type [String]
      # @param push_provider_name [String]
      # @return [GetStream::StreamResponse<GetPushTemplatesResponse>]
      def get_push_templates(push_provider_type, push_provider_name = nil)
        path = '/api/v2/push_templates'
        # Build query parameters
        query_params = {}
        query_params['push_provider_type'] = push_provider_type unless push_provider_type.nil?
        query_params['push_provider_name'] = push_provider_name unless push_provider_name.nil?

        # Make the API request
        make_request(
          :get,
          path,
          query_params: query_params
        )
      end

      # Create or update a push notification template for a specific event type and push provider
      #
      # @param upsert_push_template_request [UpsertPushTemplateRequest]
      # @return [GetStream::StreamResponse<UpsertPushTemplateResponse>]
      def upsert_push_template(upsert_push_template_request)
        path = '/api/v2/push_templates'
        # Build request body
        body = upsert_push_template_request

        # Make the API request
        make_request(
          :post,
          path,
          body: body
        )
      end

      # Get rate limits usage and quotas
      #
      # @param server_side [Boolean]
      # @param android [Boolean]
      # @param ios [Boolean]
      # @param web [Boolean]
      # @param endpoints [String]
      # @return [GetStream::StreamResponse<GetRateLimitsResponse>]
      def get_rate_limits(server_side = nil, android = nil, ios = nil, web = nil, endpoints = nil)
        path = '/api/v2/rate_limits'
        # Build query parameters
        query_params = {}
        query_params['server_side'] = server_side unless server_side.nil?
        query_params['android'] = android unless android.nil?
        query_params['ios'] = ios unless ios.nil?
        query_params['web'] = web unless web.nil?
        query_params['endpoints'] = endpoints unless endpoints.nil?

        # Make the API request
        make_request(
          :get,
          path,
          query_params: query_params
        )
      end

      # Lists all available roles
      #
      # @return [GetStream::StreamResponse<ListRolesResponse>]
      def list_roles()
        path = '/api/v2/roles'

        # Make the API request
        make_request(
          :get,
          path
        )
      end

      # Creates custom role
      #
      # @param create_role_request [CreateRoleRequest]
      # @return [GetStream::StreamResponse<CreateRoleResponse>]
      def create_role(create_role_request)
        path = '/api/v2/roles'
        # Build request body
        body = create_role_request

        # Make the API request
        make_request(
          :post,
          path,
          body: body
        )
      end

      # Deletes custom role
      #
      # @param name [String]
      # @return [GetStream::StreamResponse<Response>]
      def delete_role(name)
        path = '/api/v2/roles/{name}'
        # Replace path parameters
        path = path.gsub('{name}', name.to_s)

        # Make the API request
        make_request(
          :delete,
          path
        )
      end

      # Gets status of a task
      #
      # @param _id [String]
      # @return [GetStream::StreamResponse<GetTaskResponse>]
      def get_task(_id)
        path = '/api/v2/tasks/{id}'
        # Replace path parameters
        path = path.gsub('{id}', _id.to_s)

        # Make the API request
        make_request(
          :get,
          path
        )
      end

      # Deletes previously uploaded file
      #
      # @param url [String]
      # @return [GetStream::StreamResponse<Response>]
      def delete_file(url = nil)
        path = '/api/v2/uploads/file'
        # Build query parameters
        query_params = {}
        query_params['url'] = url unless url.nil?

        # Make the API request
        make_request(
          :delete,
          path,
          query_params: query_params
        )
      end

      # Uploads file
      #
      # @param file_upload_request [FileUploadRequest]
      # @return [GetStream::StreamResponse<FileUploadResponse>]
      def upload_file(file_upload_request)
        path = '/api/v2/uploads/file'
        # Build request body
        body = file_upload_request

        # Make the API request
        make_request(
          :post,
          path,
          body: body
        )
      end

      # Deletes previously uploaded image
      #
      # @param url [String]
      # @return [GetStream::StreamResponse<Response>]
      def delete_image(url = nil)
        path = '/api/v2/uploads/image'
        # Build query parameters
        query_params = {}
        query_params['url'] = url unless url.nil?

        # Make the API request
        make_request(
          :delete,
          path,
          query_params: query_params
        )
      end

      # Uploads image
      #
      # @param image_upload_request [ImageUploadRequest]
      # @return [GetStream::StreamResponse<ImageUploadResponse>]
      def upload_image(image_upload_request)
        path = '/api/v2/uploads/image'
        # Build request body
        body = image_upload_request

        # Make the API request
        make_request(
          :post,
          path,
          body: body
        )
      end

      # Find and filter users
      #
      # @param payload [QueryUsersPayload]
      # @return [GetStream::StreamResponse<QueryUsersResponse>]
      def query_users(payload = nil)
        path = '/api/v2/users'
        # Build query parameters
        query_params = {}
        query_params['payload'] = payload unless payload.nil?

        # Make the API request
        make_request(
          :get,
          path,
          query_params: query_params
        )
      end

      # Updates certain fields of the userSends events:- user.presence.changed- user.updated- user.presence.changed
      #
      # @param update_users_partial_request [UpdateUsersPartialRequest]
      # @return [GetStream::StreamResponse<UpdateUsersResponse>]
      def update_users_partial(update_users_partial_request)
        path = '/api/v2/users'
        # Build request body
        body = update_users_partial_request

        # Make the API request
        make_request(
          :patch,
          path,
          body: body
        )
      end

      # Update or create users in bulkSends events:- user.updated
      #
      # @param update_users_request [UpdateUsersRequest]
      # @return [GetStream::StreamResponse<UpdateUsersResponse>]
      def update_users(update_users_request)
        path = '/api/v2/users'
        # Build request body
        body = update_users_request

        # Make the API request
        make_request(
          :post,
          path,
          body: body
        )
      end

      # Get list of blocked Users
      #
      # @param user_id [String]
      # @return [GetStream::StreamResponse<GetBlockedUsersResponse>]
      def get_blocked_users(user_id = nil)
        path = '/api/v2/users/block'
        # Build query parameters
        query_params = {}
        query_params['user_id'] = user_id unless user_id.nil?

        # Make the API request
        make_request(
          :get,
          path,
          query_params: query_params
        )
      end

      # Block users
      #
      # @param block_users_request [BlockUsersRequest]
      # @return [GetStream::StreamResponse<BlockUsersResponse>]
      def block_users(block_users_request)
        path = '/api/v2/users/block'
        # Build request body
        body = block_users_request

        # Make the API request
        make_request(
          :post,
          path,
          body: body
        )
      end

      # Deactivate users in batchesSends events:- user.deactivated
      #
      # @param deactivate_users_request [DeactivateUsersRequest]
      # @return [GetStream::StreamResponse<DeactivateUsersResponse>]
      def deactivate_users(deactivate_users_request)
        path = '/api/v2/users/deactivate'
        # Build request body
        body = deactivate_users_request

        # Make the API request
        make_request(
          :post,
          path,
          body: body
        )
      end

      # Deletes users and optionally all their belongings asynchronously.Sends events:- channel.deleted- user.deleted
      #
      # @param delete_users_request [DeleteUsersRequest]
      # @return [GetStream::StreamResponse<DeleteUsersResponse>]
      def delete_users(delete_users_request)
        path = '/api/v2/users/delete'
        # Build request body
        body = delete_users_request

        # Make the API request
        make_request(
          :post,
          path,
          body: body
        )
      end

      # Retrieves all active live locations for a user
      #
      # @param user_id [String]
      # @return [GetStream::StreamResponse<SharedLocationsResponse>]
      def get_user_live_locations(user_id = nil)
        path = '/api/v2/users/live_locations'
        # Build query parameters
        query_params = {}
        query_params['user_id'] = user_id unless user_id.nil?

        # Make the API request
        make_request(
          :get,
          path,
          query_params: query_params
        )
      end

      # Updates an existing live location with new coordinates or expiration time
      #
      # @param update_live_location_request [UpdateLiveLocationRequest]
      # @param user_id [String]
      # @return [GetStream::StreamResponse<SharedLocationResponse>]
      def update_live_location(update_live_location_request, user_id = nil)
        path = '/api/v2/users/live_locations'
        # Build query parameters
        query_params = {}
        query_params['user_id'] = user_id unless user_id.nil?
        # Build request body
        body = update_live_location_request

        # Make the API request
        make_request(
          :put,
          path,
          query_params: query_params,
          body: body
        )
      end

      # Reactivate users in batchesSends events:- user.reactivated- user.reactivated
      #
      # @param reactivate_users_request [ReactivateUsersRequest]
      # @return [GetStream::StreamResponse<ReactivateUsersResponse>]
      def reactivate_users(reactivate_users_request)
        path = '/api/v2/users/reactivate'
        # Build request body
        body = reactivate_users_request

        # Make the API request
        make_request(
          :post,
          path,
          body: body
        )
      end

      # Restore soft deleted users
      #
      # @param restore_users_request [RestoreUsersRequest]
      # @return [GetStream::StreamResponse<Response>]
      def restore_users(restore_users_request)
        path = '/api/v2/users/restore'
        # Build request body
        body = restore_users_request

        # Make the API request
        make_request(
          :post,
          path,
          body: body
        )
      end

      # Unblock users
      #
      # @param unblock_users_request [UnblockUsersRequest]
      # @return [GetStream::StreamResponse<UnblockUsersResponse>]
      def unblock_users(unblock_users_request)
        path = '/api/v2/users/unblock'
        # Build request body
        body = unblock_users_request

        # Make the API request
        make_request(
          :post,
          path,
          body: body
        )
      end

      # Deactivates user with possibility to activate it backSends events:- user.deactivated
      #
      # @param user_id [String]
      # @param deactivate_user_request [DeactivateUserRequest]
      # @return [GetStream::StreamResponse<DeactivateUserResponse>]
      def deactivate_user(user_id, deactivate_user_request)
        path = '/api/v2/users/{user_id}/deactivate'
        # Replace path parameters
        path = path.gsub('{user_id}', user_id.to_s)
        # Build request body
        body = deactivate_user_request

        # Make the API request
        make_request(
          :post,
          path,
          body: body
        )
      end

      # Exports the user's profile, reactions and messages. Raises an error if a user has more than 10k messages or reactions
      #
      # @param user_id [String]
      # @return [GetStream::StreamResponse<ExportUserResponse>]
      def export_user(user_id)
        path = '/api/v2/users/{user_id}/export'
        # Replace path parameters
        path = path.gsub('{user_id}', user_id.to_s)

        # Make the API request
        make_request(
          :get,
          path
        )
      end

      # Activates user who's been deactivated previouslySends events:- user.reactivated
      #
      # @param user_id [String]
      # @param reactivate_user_request [ReactivateUserRequest]
      # @return [GetStream::StreamResponse<ReactivateUserResponse>]
      def reactivate_user(user_id, reactivate_user_request)
        path = '/api/v2/users/{user_id}/reactivate'
        # Replace path parameters
        path = path.gsub('{user_id}', user_id.to_s)
        # Build request body
        body = reactivate_user_request

        # Make the API request
        make_request(
          :post,
          path,
          body: body
        )
      end

    end
  end
end