# frozen_string_literal: true

# Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

module GetStream
  module Generated
    # Feed-specific API methods
    class Feed
      attr_reader :feed_group_id, :feed_id, :client

      def initialize(client, feed_group_id, feed_id)
        @client = client
        @feed_group_id = feed_group_id
        @feed_id = feed_id
      end

      # Delete a single feed by its ID
      #
      # @param hard_delete [Boolean]
      # @return [GetStream::StreamResponse<DeleteFeedResponse>]
      def delete_feed(hard_delete = nil)
        # Build query parameters
        query_params = {}
        query_params['hard_delete'] = hard_delete unless hard_delete.nil?

        # Delegate to the FeedsClient
        @client.feeds.delete_feed(@feed_group_id, @feed_id, query_params)
      end

      # Create a single feed for a given feed group
      #
      # @param get_or_create_feed_request [GetOrCreateFeedRequest]
      # @return [GetStream::StreamResponse<GetOrCreateFeedResponse>]
      def get_or_create_feed(get_or_create_feed_request)

        # Delegate to the FeedsClient
        @client.feeds.get_or_create_feed(@feed_group_id, @feed_id, get_or_create_feed_request)
      end

      # Update an existing feed
      #
      # @param update_feed_request [UpdateFeedRequest]
      # @return [GetStream::StreamResponse<UpdateFeedResponse>]
      def update_feed(update_feed_request)

        # Delegate to the FeedsClient
        @client.feeds.update_feed(@feed_group_id, @feed_id, update_feed_request)
      end

      # Mark activities as read/seen/watched. Can mark by timestamp (seen), activity IDs (read), or all as read.
      #
      # @param mark_activity_request [MarkActivityRequest]
      # @return [GetStream::StreamResponse<Response>]
      def mark_activity(mark_activity_request)

        # Delegate to the FeedsClient
        @client.feeds.mark_activity(@feed_group_id, @feed_id, mark_activity_request)
      end

      # Unpin an activity from a feed. This removes the pin, so the activity will no longer be displayed at the top of the feed.
      #
      # @param activity_id [String]
      # @param user_id [String]
      # @return [GetStream::StreamResponse<UnpinActivityResponse>]
      def unpin_activity(activity_id, user_id = nil)
        # Build query parameters
        query_params = {}
        query_params['user_id'] = user_id unless user_id.nil?

        # Delegate to the FeedsClient
        @client.feeds.unpin_activity(@feed_group_id, @feed_id, activity_id, query_params)
      end

      # Pin an activity to a feed. Pinned activities are typically displayed at the top of a feed.
      #
      # @param activity_id [String]
      # @param pin_activity_request [PinActivityRequest]
      # @return [GetStream::StreamResponse<PinActivityResponse>]
      def pin_activity(activity_id, pin_activity_request)

        # Delegate to the FeedsClient
        @client.feeds.pin_activity(@feed_group_id, @feed_id, activity_id, pin_activity_request)
      end

      # Add, remove, or set members for a feed
      #
      # @param update_feed_members_request [UpdateFeedMembersRequest]
      # @return [GetStream::StreamResponse<UpdateFeedMembersResponse>]
      def update_feed_members(update_feed_members_request)

        # Delegate to the FeedsClient
        @client.feeds.update_feed_members(@feed_group_id, @feed_id, update_feed_members_request)
      end

      # Accepts a pending feed member request
      #
      # @param accept_feed_member_invite_request [AcceptFeedMemberInviteRequest]
      # @return [GetStream::StreamResponse<AcceptFeedMemberInviteResponse>]
      def accept_feed_member_invite(accept_feed_member_invite_request)

        # Delegate to the FeedsClient
        @client.feeds.accept_feed_member_invite(@feed_group_id, @feed_id, accept_feed_member_invite_request)
      end

      # Query feed members based on filters with pagination and sorting options
      #
      # @param query_feed_members_request [QueryFeedMembersRequest]
      # @return [GetStream::StreamResponse<QueryFeedMembersResponse>]
      def query_feed_members(query_feed_members_request)

        # Delegate to the FeedsClient
        @client.feeds.query_feed_members(@feed_group_id, @feed_id, query_feed_members_request)
      end

      # Rejects a pending feed member request
      #
      # @param reject_feed_member_invite_request [RejectFeedMemberInviteRequest]
      # @return [GetStream::StreamResponse<RejectFeedMemberInviteResponse>]
      def reject_feed_member_invite(reject_feed_member_invite_request)

        # Delegate to the FeedsClient
        @client.feeds.reject_feed_member_invite(@feed_group_id, @feed_id, reject_feed_member_invite_request)
      end

    end
  end
end