# frozen_string_literal: true

# Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

module GetStream
  module Generated
    module Models
      # ReactionGroupResponse contains all information about a reaction of the same type.
      class ReactionGroupResponse < GetStream::BaseModel

        # Model attributes
        # @!attribute count
        #   @return [Integer] Count is the number of reactions of this type.
        attr_accessor :count
        # @!attribute first_reaction_at
        #   @return [DateTime] FirstReactionAt is the time of the first reaction of this type. This is the same also if all reaction of this type are deleted, because if someone will react again with the same type, will be preserved the sorting.
        attr_accessor :first_reaction_at
        # @!attribute last_reaction_at
        #   @return [DateTime] LastReactionAt is the time of the last reaction of this type.
        attr_accessor :last_reaction_at
        # @!attribute sum_scores
        #   @return [Integer] SumScores is the sum of all scores of reactions of this type. Medium allows you to clap articles more than once and shows the sum of all claps from all users. For example, you can send `clap` x5 using `score: 5`.
        attr_accessor :sum_scores

        # Initialize with attributes
        def initialize(attributes = {})
          super(attributes)
          @count = attributes[:count] || attributes['count']
          @first_reaction_at = attributes[:first_reaction_at] || attributes['first_reaction_at']
          @last_reaction_at = attributes[:last_reaction_at] || attributes['last_reaction_at']
          @sum_scores = attributes[:sum_scores] || attributes['sum_scores']
        end

        # Override field mappings for JSON serialization
        def self.json_field_mappings
          {
            count: 'count',
            first_reaction_at: 'first_reaction_at',
            last_reaction_at: 'last_reaction_at',
            sum_scores: 'sum_scores'
          }
        end
      end
    end
  end
end
