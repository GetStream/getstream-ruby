# frozen_string_literal: true

# Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

require_relative "../../base_model"

module GetStream
  module Generated
    module Models
      # 
      class TruncateChannelRequest < GetStream::BaseModel

        # Model attributes
        attr_accessor :hard_delete  # Permanently delete channel data (messages, reactions, etc.)
        attr_accessor :skip_push  # When `message` is set disables all push notifications for it
        attr_accessor :truncated_at  # Truncate channel data up to `truncated_at`. The system message (if provided) creation time is always greater than `truncated_at`
        attr_accessor :user_id
        attr_accessor :member_ids  # List of member IDs to hide message history for. If empty, truncates the channel for all members
        attr_accessor :message
        attr_accessor :user

        # Initialize with attributes
        def initialize(attributes = {})
          super(attributes)
          @hard_delete = attributes[:hard_delete] || attributes["hard_delete"] || false
          @skip_push = attributes[:skip_push] || attributes["skip_push"] || false
          @truncated_at = attributes[:truncated_at] || attributes["truncated_at"] || nil
          @user_id = attributes[:user_id] || attributes["user_id"] || ""
          @member_ids = attributes[:member_ids] || attributes["member_ids"] || nil
          @message = attributes[:message] || attributes["message"] || nil
          @user = attributes[:user] || attributes["user"] || nil
        end

        # Override field mappings for JSON serialization
        def self.json_field_mappings
          {
            hard_delete: "hard_delete",
            skip_push: "skip_push",
            truncated_at: "truncated_at",
            user_id: "user_id",
            member_ids: "member_ids",
            message: "message",
            user: "user"
          }
        end
      end
    end
  end
end
