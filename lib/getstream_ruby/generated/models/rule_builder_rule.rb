# frozen_string_literal: true

# Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

module GetStream
  module Generated
    module Models
      # 
      class RuleBuilderRule < GetStream::BaseModel

        # Model attributes
        # @!attribute rule_type
        #   @return [String]
        attr_accessor :rule_type
        # @!attribute action
        #   @return [RuleBuilderAction]
        attr_accessor :action
        # @!attribute _id
        #   @return [String]
        attr_accessor :_id
        # @!attribute cooldown_period
        #   @return [String]
        attr_accessor :cooldown_period
        # @!attribute logic
        #   @return [String]
        attr_accessor :logic
        # @!attribute conditions
        #   @return [Array<RuleBuilderCondition>]
        attr_accessor :conditions
        # @!attribute groups
        #   @return [Array<RuleBuilderConditionGroup>]
        attr_accessor :groups

        # Initialize with attributes
        def initialize(attributes = {})
          super(attributes)
          @rule_type = attributes[:rule_type] || attributes['rule_type']
          @action = attributes[:action] || attributes['action']
          @_id = attributes[:_id] || attributes['id'] || ""
          @cooldown_period = attributes[:cooldown_period] || attributes['cooldown_period'] || ""
          @logic = attributes[:logic] || attributes['logic'] || ""
          @conditions = attributes[:conditions] || attributes['conditions'] || nil
          @groups = attributes[:groups] || attributes['groups'] || nil
        end

        # Override field mappings for JSON serialization
        def self.json_field_mappings
          {
            rule_type: 'rule_type',
            action: 'action',
            _id: 'id',
            cooldown_period: 'cooldown_period',
            logic: 'logic',
            conditions: 'conditions',
            groups: 'groups'
          }
        end
      end
    end
  end
end
