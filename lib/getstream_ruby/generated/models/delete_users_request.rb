# frozen_string_literal: true

# Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

module GetStream
  module Generated
    module Models
      # 
      class DeleteUsersRequest < GetStream::BaseModel

        # Model attributes
        # @!attribute user_ids
        #   @return [Array<String>] IDs of users to delete
        attr_accessor :user_ids
        # @!attribute calls
        #   @return [String] Calls delete mode.,  Affected calls are those that include exactly two members, one of whom is the user being deleted.,  * null or empty string - doesn't delete any calls,  * soft - marks user's calls and their related data as deleted (soft-delete),  * hard - deletes user's calls and their data completely (hard-delete)
        attr_accessor :calls
        # @!attribute conversations
        #   @return [String] Conversation channels delete mode.,  Conversation channel is any channel which only has two members one of which is the user being deleted.,  * null or empty string - doesn't delete any conversation channels,  * soft - marks all conversation channels as deleted (same effect as Delete Channels with 'hard' option disabled),  * hard - deletes channel and all its data completely including messages (same effect as Delete Channels with 'hard' option enabled)
        attr_accessor :conversations
        # @!attribute files
        #   @return [Boolean] Delete user files.,  * false or empty string - doesn't delete any files,  * true - deletes all files uploaded by the user, including images and attachments.
        attr_accessor :files
        # @!attribute messages
        #   @return [String] Message delete mode.,  * null or empty string - doesn't delete user messages,  * soft - marks all user messages as deleted without removing any related message data,  * pruning - marks all user messages as deleted, nullifies message information and removes some message data such as reactions and flags,  * hard - deletes messages completely with all related information
        attr_accessor :messages
        # @!attribute new_call_owner_id
        #   @return [String]
        attr_accessor :new_call_owner_id
        # @!attribute new_channel_owner_id
        #   @return [String]
        attr_accessor :new_channel_owner_id
        # @!attribute user
        #   @return [String] User delete mode.,  * soft - marks user as deleted and retains all user data,  * pruning - marks user as deleted and nullifies user information,  * hard - deletes user completely. Requires 'hard' option for messages and conversations as well
        attr_accessor :user

        # Initialize with attributes
        def initialize(attributes = {})
          super(attributes)
          @user_ids = attributes[:user_ids] || attributes['user_ids']
          @calls = attributes[:calls] || attributes['calls'] || ""
          @conversations = attributes[:conversations] || attributes['conversations'] || ""
          @files = attributes[:files] || attributes['files'] || false
          @messages = attributes[:messages] || attributes['messages'] || ""
          @new_call_owner_id = attributes[:new_call_owner_id] || attributes['new_call_owner_id'] || ""
          @new_channel_owner_id = attributes[:new_channel_owner_id] || attributes['new_channel_owner_id'] || ""
          @user = attributes[:user] || attributes['user'] || ""
        end

        # Override field mappings for JSON serialization
        def self.json_field_mappings
          {
            user_ids: 'user_ids',
            calls: 'calls',
            conversations: 'conversations',
            files: 'files',
            messages: 'messages',
            new_call_owner_id: 'new_call_owner_id',
            new_channel_owner_id: 'new_channel_owner_id',
            user: 'user'
          }
        end
      end
    end
  end
end
