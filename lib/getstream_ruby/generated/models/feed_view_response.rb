# frozen_string_literal: true

# Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

module GetStream
  module Generated
    module Models
      # 
      class FeedViewResponse < GetStream::BaseModel

        # Model attributes
        # @!attribute id
        #   @return [String] Unique identifier for the custom feed view
        attr_accessor :id
        # @!attribute last_used_at
        #   @return [DateTime] When the feed view was last used
        attr_accessor :last_used_at
        # @!attribute activity_processors
        #   @return [Array<ActivityProcessorConfig>] Configured activity processors
        attr_accessor :activity_processors
        # @!attribute activity_selectors
        #   @return [Array<ActivitySelectorConfig>] Configured activity selectors
        attr_accessor :activity_selectors
        # @!attribute aggregation
        #   @return [AggregationConfig]
        attr_accessor :aggregation
        # @!attribute ranking
        #   @return [RankingConfig]
        attr_accessor :ranking

        # Initialize with attributes
        def initialize(attributes = {})
          super(attributes)
          @id = attributes[:id] || attributes['id']
          @last_used_at = attributes[:last_used_at] || attributes['last_used_at'] || nil
          @activity_processors = attributes[:activity_processors] || attributes['activity_processors'] || nil
          @activity_selectors = attributes[:activity_selectors] || attributes['activity_selectors'] || nil
          @aggregation = attributes[:aggregation] || attributes['aggregation'] || nil
          @ranking = attributes[:ranking] || attributes['ranking'] || nil
        end

        # Override field mappings for JSON serialization
        def self.json_field_mappings
          {
            id: 'id',
            last_used_at: 'last_used_at',
            activity_processors: 'activity_processors',
            activity_selectors: 'activity_selectors',
            aggregation: 'aggregation',
            ranking: 'ranking'
          }
        end
      end
    end
  end
end
