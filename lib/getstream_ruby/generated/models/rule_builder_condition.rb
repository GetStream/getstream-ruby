# frozen_string_literal: true

# Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

module GetStream
  module Generated
    module Models
      # 
      class RuleBuilderCondition < GetStream::BaseModel

        # Model attributes
        # @!attribute _type
        #   @return [String]
        attr_accessor :_type
        # @!attribute confidence
        #   @return [Float]
        attr_accessor :confidence
        # @!attribute content_count_rule_params
        #   @return [ContentCountRuleParameters]
        attr_accessor :content_count_rule_params
        # @!attribute image_content_params
        #   @return [ImageContentParameters]
        attr_accessor :image_content_params
        # @!attribute image_rule_params
        #   @return [ImageRuleParameters]
        attr_accessor :image_rule_params
        # @!attribute text_content_params
        #   @return [TextContentParameters]
        attr_accessor :text_content_params
        # @!attribute text_rule_params
        #   @return [TextRuleParameters]
        attr_accessor :text_rule_params
        # @!attribute user_created_within_params
        #   @return [UserCreatedWithinParameters]
        attr_accessor :user_created_within_params
        # @!attribute user_custom_property_params
        #   @return [UserCustomPropertyParameters]
        attr_accessor :user_custom_property_params
        # @!attribute user_rule_params
        #   @return [UserRuleParameters]
        attr_accessor :user_rule_params
        # @!attribute video_content_params
        #   @return [VideoContentParameters]
        attr_accessor :video_content_params
        # @!attribute video_rule_params
        #   @return [VideoRuleParameters]
        attr_accessor :video_rule_params

        # Initialize with attributes
        def initialize(attributes = {})
          super(attributes)
          @_type = attributes[:_type] || attributes['type'] || ""
          @confidence = attributes[:confidence] || attributes['confidence'] || 0.0
          @content_count_rule_params = attributes[:content_count_rule_params] || attributes['content_count_rule_params'] || nil
          @image_content_params = attributes[:image_content_params] || attributes['image_content_params'] || nil
          @image_rule_params = attributes[:image_rule_params] || attributes['image_rule_params'] || nil
          @text_content_params = attributes[:text_content_params] || attributes['text_content_params'] || nil
          @text_rule_params = attributes[:text_rule_params] || attributes['text_rule_params'] || nil
          @user_created_within_params = attributes[:user_created_within_params] || attributes['user_created_within_params'] || nil
          @user_custom_property_params = attributes[:user_custom_property_params] || attributes['user_custom_property_params'] || nil
          @user_rule_params = attributes[:user_rule_params] || attributes['user_rule_params'] || nil
          @video_content_params = attributes[:video_content_params] || attributes['video_content_params'] || nil
          @video_rule_params = attributes[:video_rule_params] || attributes['video_rule_params'] || nil
        end

        # Override field mappings for JSON serialization
        def self.json_field_mappings
          {
            _type: 'type',
            confidence: 'confidence',
            content_count_rule_params: 'content_count_rule_params',
            image_content_params: 'image_content_params',
            image_rule_params: 'image_rule_params',
            text_content_params: 'text_content_params',
            text_rule_params: 'text_rule_params',
            user_created_within_params: 'user_created_within_params',
            user_custom_property_params: 'user_custom_property_params',
            user_rule_params: 'user_rule_params',
            video_content_params: 'video_content_params',
            video_rule_params: 'video_rule_params'
          }
        end
      end
    end
  end
end
