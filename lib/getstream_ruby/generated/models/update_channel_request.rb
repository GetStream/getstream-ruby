# frozen_string_literal: true

# Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

require_relative "../../base_model"

module GetStream
  module Generated
    module Models
      # 
      class UpdateChannelRequest < GetStream::BaseModel

        # Model attributes
        attr_accessor :accept_invite  # Set to `true` to accept the invite
        attr_accessor :cooldown  # Sets cool down period for the channel in seconds
        attr_accessor :hide_history  # Set to `true` to hide channel's history when adding new members
        attr_accessor :reject_invite  # Set to `true` to reject the invite
        attr_accessor :skip_push  # When `message` is set disables all push notifications for it
        attr_accessor :user_id
        attr_accessor :add_members  # List of user IDs to add to the channel
        attr_accessor :add_moderators  # List of user IDs to make channel moderators
        attr_accessor :assign_roles  # List of channel member role assignments. If any specified user is not part of the channel, the request will fail
        attr_accessor :demote_moderators  # List of user IDs to take away moderators status from
        attr_accessor :invites  # List of user IDs to invite to the channel
        attr_accessor :remove_members  # List of user IDs to remove from the channel
        attr_accessor :data
        attr_accessor :message
        attr_accessor :user

        # Initialize with attributes
        def initialize(attributes = {})
          super(attributes)
          @accept_invite = attributes[:accept_invite] || attributes["accept_invite"] || false
          @cooldown = attributes[:cooldown] || attributes["cooldown"] || 0
          @hide_history = attributes[:hide_history] || attributes["hide_history"] || false
          @reject_invite = attributes[:reject_invite] || attributes["reject_invite"] || false
          @skip_push = attributes[:skip_push] || attributes["skip_push"] || false
          @user_id = attributes[:user_id] || attributes["user_id"] || ""
          @add_members = attributes[:add_members] || attributes["add_members"] || nil
          @add_moderators = attributes[:add_moderators] || attributes["add_moderators"] || nil
          @assign_roles = attributes[:assign_roles] || attributes["assign_roles"] || nil
          @demote_moderators = attributes[:demote_moderators] || attributes["demote_moderators"] || nil
          @invites = attributes[:invites] || attributes["invites"] || nil
          @remove_members = attributes[:remove_members] || attributes["remove_members"] || nil
          @data = attributes[:data] || attributes["data"] || nil
          @message = attributes[:message] || attributes["message"] || nil
          @user = attributes[:user] || attributes["user"] || nil
        end

        # Override field mappings for JSON serialization
        def self.json_field_mappings
          {
            accept_invite: "accept_invite",
            cooldown: "cooldown",
            hide_history: "hide_history",
            reject_invite: "reject_invite",
            skip_push: "skip_push",
            user_id: "user_id",
            add_members: "add_members",
            add_moderators: "add_moderators",
            assign_roles: "assign_roles",
            demote_moderators: "demote_moderators",
            invites: "invites",
            remove_members: "remove_members",
            data: "data",
            message: "message",
            user: "user"
          }
        end
      end
    end
  end
end
