# frozen_string_literal: true

# Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

module GetStream
  module Generated
    module Models
      # 
      class APIError < GetStream::BaseModel

        # Model attributes
        attr_accessor :code  # API error code
        attr_accessor :duration  # Request duration
        attr_accessor :message  # Message describing an error
        attr_accessor :more_info  # URL with additional information
        attr_accessor :status_code  # Response HTTP status code
        attr_accessor :details  # Additional error-specific information
        attr_accessor :unrecoverable  # Flag that indicates if the error is unrecoverable, requests that return unrecoverable errors should not be retried, this error only applies to the request that caused it
        attr_accessor :exception_fields  # Additional error info

        # Initialize with attributes
        def initialize(attributes = {})
          super(attributes)
          @code = attributes[:code] || attributes['code']
          @duration = attributes[:duration] || attributes['duration']
          @message = attributes[:message] || attributes['message']
          @more_info = attributes[:more_info] || attributes['more_info']
          @status_code = attributes[:status_code] || attributes['StatusCode']
          @details = attributes[:details] || attributes['details']
          @unrecoverable = attributes[:unrecoverable] || attributes['unrecoverable'] || false
          @exception_fields = attributes[:exception_fields] || attributes['exception_fields'] || nil
        end

        # Override field mappings for JSON serialization
        def self.json_field_mappings
          {
            code: 'code',
            duration: 'duration',
            message: 'message',
            more_info: 'more_info',
            status_code: 'StatusCode',
            details: 'details',
            unrecoverable: 'unrecoverable',
            exception_fields: 'exception_fields'
          }
        end
      end
    end
  end
end
