# frozen_string_literal: true

# Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

require_relative "../../base_model"

module GetStream
  module Generated
    module Models
      # 
      class ChannelMember < GetStream::BaseModel

        # Model attributes
        attr_accessor :banned  # Whether member is banned this channel or not
        attr_accessor :channel_role  # Role of the member in the channel
        attr_accessor :created_at  # Date/time of creation
        attr_accessor :notifications_muted
        attr_accessor :shadow_banned  # Whether member is shadow banned in this channel or not
        attr_accessor :updated_at  # Date/time of the last update
        attr_accessor :custom
        attr_accessor :archived_at
        attr_accessor :ban_expires  # Expiration date of the ban
        attr_accessor :deleted_at
        attr_accessor :invite_accepted_at  # Date when invite was accepted
        attr_accessor :invite_rejected_at  # Date when invite was rejected
        attr_accessor :invited  # Whether member was invited or not
        attr_accessor :is_moderator  # Whether member is channel moderator or not
        attr_accessor :pinned_at
        attr_accessor :role  # Permission level of the member in the channel (DEPRECATED: use channel_role instead)
        attr_accessor :status
        attr_accessor :user_id
        attr_accessor :deleted_messages
        attr_accessor :user

        # Initialize with attributes
        def initialize(attributes = {})
          super(attributes)
          @banned = attributes[:banned] || attributes["banned"]
          @channel_role = attributes[:channel_role] || attributes["channel_role"]
          @created_at = attributes[:created_at] || attributes["created_at"]
          @notifications_muted = attributes[:notifications_muted] || attributes["notifications_muted"]
          @shadow_banned = attributes[:shadow_banned] || attributes["shadow_banned"]
          @updated_at = attributes[:updated_at] || attributes["updated_at"]
          @custom = attributes[:custom] || attributes["custom"]
          @archived_at = attributes[:archived_at] || attributes["archived_at"] || nil
          @ban_expires = attributes[:ban_expires] || attributes["ban_expires"] || nil
          @deleted_at = attributes[:deleted_at] || attributes["deleted_at"] || nil
          @invite_accepted_at = attributes[:invite_accepted_at] || attributes["invite_accepted_at"] || nil
          @invite_rejected_at = attributes[:invite_rejected_at] || attributes["invite_rejected_at"] || nil
          @invited = attributes[:invited] || attributes["invited"] || false
          @is_moderator = attributes[:is_moderator] || attributes["is_moderator"] || false
          @pinned_at = attributes[:pinned_at] || attributes["pinned_at"] || nil
          @role = attributes[:role] || attributes["role"] || ""
          @status = attributes[:status] || attributes["status"] || ""
          @user_id = attributes[:user_id] || attributes["user_id"] || ""
          @deleted_messages = attributes[:deleted_messages] || attributes["deleted_messages"] || nil
          @user = attributes[:user] || attributes["user"] || nil
        end

        # Override field mappings for JSON serialization
        def self.json_field_mappings
          {
            banned: "banned",
            channel_role: "channel_role",
            created_at: "created_at",
            notifications_muted: "notifications_muted",
            shadow_banned: "shadow_banned",
            updated_at: "updated_at",
            custom: "custom",
            archived_at: "archived_at",
            ban_expires: "ban_expires",
            deleted_at: "deleted_at",
            invite_accepted_at: "invite_accepted_at",
            invite_rejected_at: "invite_rejected_at",
            invited: "invited",
            is_moderator: "is_moderator",
            pinned_at: "pinned_at",
            role: "role",
            status: "status",
            user_id: "user_id",
            deleted_messages: "deleted_messages",
            user: "user"
          }
        end
      end
    end
  end
end
