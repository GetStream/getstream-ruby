# frozen_string_literal: true

# Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

module GetStream
  module Generated
    module Models
      # 
      class UpdatePollRequest < GetStream::BaseModel

        # Model attributes
        # @!attribute id
        #   @return [String] Poll ID
        attr_accessor :id
        # @!attribute name
        #   @return [String] Poll name
        attr_accessor :name
        # @!attribute allow_answers
        #   @return [Boolean] Allow answers
        attr_accessor :allow_answers
        # @!attribute allow_user_suggested_options
        #   @return [Boolean] Allow user suggested options
        attr_accessor :allow_user_suggested_options
        # @!attribute description
        #   @return [String] Poll description
        attr_accessor :description
        # @!attribute enforce_unique_vote
        #   @return [Boolean] Enforce unique vote
        attr_accessor :enforce_unique_vote
        # @!attribute is_closed
        #   @return [Boolean] Is closed
        attr_accessor :is_closed
        # @!attribute max_votes_allowed
        #   @return [Integer] Max votes allowed
        attr_accessor :max_votes_allowed
        # @!attribute user_id
        #   @return [String]
        attr_accessor :user_id
        # @!attribute voting_visibility
        #   @return [String] Voting visibility
        attr_accessor :voting_visibility
        # @!attribute options
        #   @return [Array<PollOptionRequest>] Poll options
        attr_accessor :options
        # @!attribute custom
        #   @return [Object]
        attr_accessor :custom
        # @!attribute user
        #   @return [UserRequest]
        attr_accessor :user

        # Initialize with attributes
        def initialize(attributes = {})
          super(attributes)
          @id = attributes[:id] || attributes['id']
          @name = attributes[:name] || attributes['name']
          @allow_answers = attributes[:allow_answers] || attributes['allow_answers'] || false
          @allow_user_suggested_options = attributes[:allow_user_suggested_options] || attributes['allow_user_suggested_options'] || false
          @description = attributes[:description] || attributes['description'] || ""
          @enforce_unique_vote = attributes[:enforce_unique_vote] || attributes['enforce_unique_vote'] || false
          @is_closed = attributes[:is_closed] || attributes['is_closed'] || false
          @max_votes_allowed = attributes[:max_votes_allowed] || attributes['max_votes_allowed'] || 0
          @user_id = attributes[:user_id] || attributes['user_id'] || ""
          @voting_visibility = attributes[:voting_visibility] || attributes['voting_visibility'] || ""
          @options = attributes[:options] || attributes['options'] || nil
          @custom = attributes[:custom] || attributes['Custom'] || nil
          @user = attributes[:user] || attributes['user'] || nil
        end

        # Override field mappings for JSON serialization
        def self.json_field_mappings
          {
            id: 'id',
            name: 'name',
            allow_answers: 'allow_answers',
            allow_user_suggested_options: 'allow_user_suggested_options',
            description: 'description',
            enforce_unique_vote: 'enforce_unique_vote',
            is_closed: 'is_closed',
            max_votes_allowed: 'max_votes_allowed',
            user_id: 'user_id',
            voting_visibility: 'voting_visibility',
            options: 'options',
            custom: 'Custom',
            user: 'user'
          }
        end
      end
    end
  end
end
