# frozen_string_literal: true

# Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

require_relative "../../base_model"

module GetStream
  module Generated
    module Models
      # 
      class ActivityResponse < GetStream::BaseModel

        # Model attributes
        attr_accessor :_id  # Unique identifier for the activity
        attr_accessor :_type  # Type of activity
        attr_accessor :bookmark_count  # Number of bookmarks on the activity
        attr_accessor :comment_count  # Number of comments on the activity
        attr_accessor :created_at  # When the activity was created
        attr_accessor :popularity  # Popularity score of the activity
        attr_accessor :reaction_count  # Number of reactions to the activity
        attr_accessor :score  # Ranking score for this activity
        attr_accessor :share_count  # Number of times the activity was shared
        attr_accessor :updated_at  # When the activity was last updated
        attr_accessor :visibility  # Visibility setting for the activity
        attr_accessor :attachments  # Media attachments for the activity
        attr_accessor :comments  # Comments on this activity
        attr_accessor :feeds  # List of feed IDs containing this activity
        attr_accessor :filter_tags  # Tags for filtering
        attr_accessor :interest_tags  # Tags for user interests
        attr_accessor :latest_reactions  # Recent reactions to the activity
        attr_accessor :mentioned_users  # Users mentioned in the activity
        attr_accessor :own_bookmarks  # Current user's bookmarks for this activity
        attr_accessor :own_reactions  # Current user's reactions to this activity
        attr_accessor :custom  # Custom data for the activity
        attr_accessor :reaction_groups  # Grouped reactions by type
        attr_accessor :search_data  # Data for search indexing
        attr_accessor :user
        attr_accessor :deleted_at  # When the activity was deleted
        attr_accessor :edited_at  # When the activity was last edited
        attr_accessor :expires_at  # When the activity will expire
        attr_accessor :hidden  # If this activity is hidden for this user. For premium content where you want to show a preview
        attr_accessor :text  # Text content of the activity
        attr_accessor :visibility_tag  # If visibility is 'tag', this is the tag name
        attr_accessor :current_feed
        attr_accessor :location
        attr_accessor :moderation
        attr_accessor :notification_context
        attr_accessor :parent
        attr_accessor :poll

        # Initialize with attributes
        def initialize(attributes = {})
          super(attributes)
          @_id = attributes[:_id] || attributes["id"]
          @_type = attributes[:_type] || attributes["type"]
          @bookmark_count = attributes[:bookmark_count] || attributes["bookmark_count"]
          @comment_count = attributes[:comment_count] || attributes["comment_count"]
          @created_at = attributes[:created_at] || attributes["created_at"]
          @popularity = attributes[:popularity] || attributes["popularity"]
          @reaction_count = attributes[:reaction_count] || attributes["reaction_count"]
          @score = attributes[:score] || attributes["score"]
          @share_count = attributes[:share_count] || attributes["share_count"]
          @updated_at = attributes[:updated_at] || attributes["updated_at"]
          @visibility = attributes[:visibility] || attributes["visibility"]
          @attachments = attributes[:attachments] || attributes["attachments"]
          @comments = attributes[:comments] || attributes["comments"]
          @feeds = attributes[:feeds] || attributes["feeds"]
          @filter_tags = attributes[:filter_tags] || attributes["filter_tags"]
          @interest_tags = attributes[:interest_tags] || attributes["interest_tags"]
          @latest_reactions = attributes[:latest_reactions] || attributes["latest_reactions"]
          @mentioned_users = attributes[:mentioned_users] || attributes["mentioned_users"]
          @own_bookmarks = attributes[:own_bookmarks] || attributes["own_bookmarks"]
          @own_reactions = attributes[:own_reactions] || attributes["own_reactions"]
          @custom = attributes[:custom] || attributes["custom"]
          @reaction_groups = attributes[:reaction_groups] || attributes["reaction_groups"]
          @search_data = attributes[:search_data] || attributes["search_data"]
          @user = attributes[:user] || attributes["user"]
          @deleted_at = attributes[:deleted_at] || attributes["deleted_at"] || nil
          @edited_at = attributes[:edited_at] || attributes["edited_at"] || nil
          @expires_at = attributes[:expires_at] || attributes["expires_at"] || nil
          @hidden = attributes[:hidden] || attributes["hidden"] || false
          @text = attributes[:text] || attributes["text"] || ""
          @visibility_tag = attributes[:visibility_tag] || attributes["visibility_tag"] || ""
          @current_feed = attributes[:current_feed] || attributes["current_feed"] || nil
          @location = attributes[:location] || attributes["location"] || nil
          @moderation = attributes[:moderation] || attributes["moderation"] || nil
          @notification_context = attributes[:notification_context] || attributes["notification_context"] || nil
          @parent = attributes[:parent] || attributes["parent"] || nil
          @poll = attributes[:poll] || attributes["poll"] || nil
        end

        # Override field mappings for JSON serialization
        def self.json_field_mappings
          {
            _id: "id",
            _type: "type",
            bookmark_count: "bookmark_count",
            comment_count: "comment_count",
            created_at: "created_at",
            popularity: "popularity",
            reaction_count: "reaction_count",
            score: "score",
            share_count: "share_count",
            updated_at: "updated_at",
            visibility: "visibility",
            attachments: "attachments",
            comments: "comments",
            feeds: "feeds",
            filter_tags: "filter_tags",
            interest_tags: "interest_tags",
            latest_reactions: "latest_reactions",
            mentioned_users: "mentioned_users",
            own_bookmarks: "own_bookmarks",
            own_reactions: "own_reactions",
            custom: "custom",
            reaction_groups: "reaction_groups",
            search_data: "search_data",
            user: "user",
            deleted_at: "deleted_at",
            edited_at: "edited_at",
            expires_at: "expires_at",
            hidden: "hidden",
            text: "text",
            visibility_tag: "visibility_tag",
            current_feed: "current_feed",
            location: "location",
            moderation: "moderation",
            notification_context: "notification_context",
            parent: "parent",
            poll: "poll"
          }
        end
      end
    end
  end
end
