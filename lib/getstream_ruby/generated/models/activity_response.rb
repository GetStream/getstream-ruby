# frozen_string_literal: true

# Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

module GetStream
  module Generated
    module Models
      # 
      class ActivityResponse < GetStream::BaseModel

        # Model attributes
        # @!attribute _id
        #   @return [String] Unique identifier for the activity
        attr_accessor :_id
        # @!attribute _type
        #   @return [String] Type of activity
        attr_accessor :_type
        # @!attribute bookmark_count
        #   @return [Integer] Number of bookmarks on the activity
        attr_accessor :bookmark_count
        # @!attribute comment_count
        #   @return [Integer] Number of comments on the activity
        attr_accessor :comment_count
        # @!attribute created_at
        #   @return [DateTime] When the activity was created
        attr_accessor :created_at
        # @!attribute popularity
        #   @return [Integer] Popularity score of the activity
        attr_accessor :popularity
        # @!attribute reaction_count
        #   @return [Integer] Number of reactions to the activity
        attr_accessor :reaction_count
        # @!attribute score
        #   @return [Float] Ranking score for this activity
        attr_accessor :score
        # @!attribute share_count
        #   @return [Integer] Number of times the activity was shared
        attr_accessor :share_count
        # @!attribute updated_at
        #   @return [DateTime] When the activity was last updated
        attr_accessor :updated_at
        # @!attribute visibility
        #   @return [String] Visibility setting for the activity
        attr_accessor :visibility
        # @!attribute attachments
        #   @return [Array<Attachment>] Media attachments for the activity
        attr_accessor :attachments
        # @!attribute comments
        #   @return [Array<CommentResponse>] Comments on this activity
        attr_accessor :comments
        # @!attribute feeds
        #   @return [Array<String>] List of feed IDs containing this activity
        attr_accessor :feeds
        # @!attribute filter_tags
        #   @return [Array<String>] Tags for filtering
        attr_accessor :filter_tags
        # @!attribute interest_tags
        #   @return [Array<String>] Tags for user interests
        attr_accessor :interest_tags
        # @!attribute latest_reactions
        #   @return [Array<FeedsReactionResponse>] Recent reactions to the activity
        attr_accessor :latest_reactions
        # @!attribute mentioned_users
        #   @return [Array<UserResponse>] Users mentioned in the activity
        attr_accessor :mentioned_users
        # @!attribute own_bookmarks
        #   @return [Array<BookmarkResponse>] Current user's bookmarks for this activity
        attr_accessor :own_bookmarks
        # @!attribute own_reactions
        #   @return [Array<FeedsReactionResponse>] Current user's reactions to this activity
        attr_accessor :own_reactions
        # @!attribute custom
        #   @return [Object] Custom data for the activity
        attr_accessor :custom
        # @!attribute reaction_groups
        #   @return [Hash<String, ReactionGroupResponse>] Grouped reactions by type
        attr_accessor :reaction_groups
        # @!attribute search_data
        #   @return [Object] Data for search indexing
        attr_accessor :search_data
        # @!attribute user
        #   @return [UserResponse]
        attr_accessor :user
        # @!attribute deleted_at
        #   @return [DateTime] When the activity was deleted
        attr_accessor :deleted_at
        # @!attribute edited_at
        #   @return [DateTime] When the activity was last edited
        attr_accessor :edited_at
        # @!attribute expires_at
        #   @return [DateTime] When the activity will expire
        attr_accessor :expires_at
        # @!attribute hidden
        #   @return [Boolean] If this activity is hidden for this user. For premium content where you want to show a preview
        attr_accessor :hidden
        # @!attribute text
        #   @return [String] Text content of the activity
        attr_accessor :text
        # @!attribute visibility_tag
        #   @return [String] If visibility is 'tag', this is the tag name
        attr_accessor :visibility_tag
        # @!attribute current_feed
        #   @return [FeedResponse]
        attr_accessor :current_feed
        # @!attribute location
        #   @return [ActivityLocation]
        attr_accessor :location
        # @!attribute moderation
        #   @return [ModerationV2Response]
        attr_accessor :moderation
        # @!attribute notification_context
        #   @return [NotificationContext]
        attr_accessor :notification_context
        # @!attribute parent
        #   @return [ActivityResponse]
        attr_accessor :parent
        # @!attribute poll
        #   @return [PollResponseData]
        attr_accessor :poll

        # Initialize with attributes
        def initialize(attributes = {})
          super(attributes)
          @_id = attributes[:_id] || attributes['id']
          @_type = attributes[:_type] || attributes['type']
          @bookmark_count = attributes[:bookmark_count] || attributes['bookmark_count']
          @comment_count = attributes[:comment_count] || attributes['comment_count']
          @created_at = attributes[:created_at] || attributes['created_at']
          @popularity = attributes[:popularity] || attributes['popularity']
          @reaction_count = attributes[:reaction_count] || attributes['reaction_count']
          @score = attributes[:score] || attributes['score']
          @share_count = attributes[:share_count] || attributes['share_count']
          @updated_at = attributes[:updated_at] || attributes['updated_at']
          @visibility = attributes[:visibility] || attributes['visibility']
          @attachments = attributes[:attachments] || attributes['attachments']
          @comments = attributes[:comments] || attributes['comments']
          @feeds = attributes[:feeds] || attributes['feeds']
          @filter_tags = attributes[:filter_tags] || attributes['filter_tags']
          @interest_tags = attributes[:interest_tags] || attributes['interest_tags']
          @latest_reactions = attributes[:latest_reactions] || attributes['latest_reactions']
          @mentioned_users = attributes[:mentioned_users] || attributes['mentioned_users']
          @own_bookmarks = attributes[:own_bookmarks] || attributes['own_bookmarks']
          @own_reactions = attributes[:own_reactions] || attributes['own_reactions']
          @custom = attributes[:custom] || attributes['custom']
          @reaction_groups = attributes[:reaction_groups] || attributes['reaction_groups']
          @search_data = attributes[:search_data] || attributes['search_data']
          @user = attributes[:user] || attributes['user']
          @deleted_at = attributes[:deleted_at] || attributes['deleted_at'] || nil
          @edited_at = attributes[:edited_at] || attributes['edited_at'] || nil
          @expires_at = attributes[:expires_at] || attributes['expires_at'] || nil
          @hidden = attributes[:hidden] || attributes['hidden'] || false
          @text = attributes[:text] || attributes['text'] || ""
          @visibility_tag = attributes[:visibility_tag] || attributes['visibility_tag'] || ""
          @current_feed = attributes[:current_feed] || attributes['current_feed'] || nil
          @location = attributes[:location] || attributes['location'] || nil
          @moderation = attributes[:moderation] || attributes['moderation'] || nil
          @notification_context = attributes[:notification_context] || attributes['notification_context'] || nil
          @parent = attributes[:parent] || attributes['parent'] || nil
          @poll = attributes[:poll] || attributes['poll'] || nil
        end

        # Override field mappings for JSON serialization
        def self.json_field_mappings
          {
            _id: 'id',
            _type: 'type',
            bookmark_count: 'bookmark_count',
            comment_count: 'comment_count',
            created_at: 'created_at',
            popularity: 'popularity',
            reaction_count: 'reaction_count',
            score: 'score',
            share_count: 'share_count',
            updated_at: 'updated_at',
            visibility: 'visibility',
            attachments: 'attachments',
            comments: 'comments',
            feeds: 'feeds',
            filter_tags: 'filter_tags',
            interest_tags: 'interest_tags',
            latest_reactions: 'latest_reactions',
            mentioned_users: 'mentioned_users',
            own_bookmarks: 'own_bookmarks',
            own_reactions: 'own_reactions',
            custom: 'custom',
            reaction_groups: 'reaction_groups',
            search_data: 'search_data',
            user: 'user',
            deleted_at: 'deleted_at',
            edited_at: 'edited_at',
            expires_at: 'expires_at',
            hidden: 'hidden',
            text: 'text',
            visibility_tag: 'visibility_tag',
            current_feed: 'current_feed',
            location: 'location',
            moderation: 'moderation',
            notification_context: 'notification_context',
            parent: 'parent',
            poll: 'poll'
          }
        end
      end
    end
  end
end
