# frozen_string_literal: true

# Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

require_relative "../../base_model"

module GetStream
  module Generated
    module Models
      # 
      class SegmentResponse < GetStream::BaseModel

        # Model attributes
        attr_accessor :_id
        attr_accessor :_type
        attr_accessor :all_sender_channels
        attr_accessor :all_users
        attr_accessor :created_at
        attr_accessor :deleted_at
        attr_accessor :description
        attr_accessor :name
        attr_accessor :size
        attr_accessor :updated_at
        attr_accessor :filter

        # Initialize with attributes
        def initialize(attributes = {})
          super(attributes)
          @_id = attributes[:_id] || attributes["id"]
          @_type = attributes[:_type] || attributes["type"]
          @all_sender_channels = attributes[:all_sender_channels] || attributes["all_sender_channels"]
          @all_users = attributes[:all_users] || attributes["all_users"]
          @created_at = attributes[:created_at] || attributes["created_at"]
          @deleted_at = attributes[:deleted_at] || attributes["deleted_at"]
          @description = attributes[:description] || attributes["description"]
          @name = attributes[:name] || attributes["name"]
          @size = attributes[:size] || attributes["size"]
          @updated_at = attributes[:updated_at] || attributes["updated_at"]
          @filter = attributes[:filter] || attributes["filter"]
        end

        # Override field mappings for JSON serialization
        def self.json_field_mappings
          {
            _id: "id",
            _type: "type",
            all_sender_channels: "all_sender_channels",
            all_users: "all_users",
            created_at: "created_at",
            deleted_at: "deleted_at",
            description: "description",
            name: "name",
            size: "size",
            updated_at: "updated_at",
            filter: "filter"
          }
        end
      end
    end
  end
end
