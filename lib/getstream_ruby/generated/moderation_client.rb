# frozen_string_literal: true

# Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

# Load all models at once
Dir[File.join(__dir__, "models", "*.rb")].sort.each { |file| require_relative file }

module GetStream
  module Generated
    # Moderation API client with generated methods
    class ModerationClient
      def initialize(client)
        @client = client
      end
      # Ban a user from a channel or the entire app
      #
      # @param ban_request [BanRequest]
      # @return [Models::BanResponse]
      def ban(ban_request)
        path = '/api/v2/moderation/ban'
        # Build request body
        body = ban_request

        # Make the API request
        @client.make_request(
          :post,
          path,
          body: body
        )
      end

      # Moderate multiple images in bulk using a CSV file
      #
      # @param bulk_image_moderation_request [BulkImageModerationRequest]
      # @return [Models::BulkImageModerationResponse]
      def bulk_image_moderation(bulk_image_moderation_request)
        path = '/api/v2/moderation/bulk_image_moderation'
        # Build request body
        body = bulk_image_moderation_request

        # Make the API request
        @client.make_request(
          :post,
          path,
          body: body
        )
      end

      # Run moderation checks on the provided content
      #
      # @param check_request [CheckRequest]
      # @return [Models::CheckResponse]
      def check(check_request)
        path = '/api/v2/moderation/check'
        # Build request body
        body = check_request

        # Make the API request
        @client.make_request(
          :post,
          path,
          body: body
        )
      end

      # Create a new moderation configuration or update an existing one. Configure settings for content filtering, AI analysis, toxicity detection, and other moderation features.
      #
      # @param upsert_config_request [UpsertConfigRequest]
      # @return [Models::UpsertConfigResponse]
      def upsert_config(upsert_config_request)
        path = '/api/v2/moderation/config'
        # Build request body
        body = upsert_config_request

        # Make the API request
        @client.make_request(
          :post,
          path,
          body: body
        )
      end

      # Delete a specific moderation policy by its name
      #
      # @param key [String]
      # @param team [String]
      # @return [Models::DeleteModerationConfigResponse]
      def delete_config(key, team = nil)
        path = '/api/v2/moderation/config/{key}'
        # Replace path parameters
        path = path.gsub('{key}', key.to_s)
        # Build query parameters
        query_params = {}
        query_params['team'] = team unless team.nil?

        # Make the API request
        @client.make_request(
          :delete,
          path,
          query_params: query_params
        )
      end

      # Retrieve a specific moderation configuration by its key and team. This configuration contains settings for various moderation features like toxicity detection, AI analysis, and filtering rules.
      #
      # @param key [String]
      # @param team [String]
      # @return [Models::GetConfigResponse]
      def get_config(key, team = nil)
        path = '/api/v2/moderation/config/{key}'
        # Replace path parameters
        path = path.gsub('{key}', key.to_s)
        # Build query parameters
        query_params = {}
        query_params['team'] = team unless team.nil?

        # Make the API request
        @client.make_request(
          :get,
          path,
          query_params: query_params
        )
      end

      # Search and filter moderation configurations across your application. This endpoint is designed for building moderation dashboards and managing multiple configuration sets.
      #
      # @param query_moderation_configs_request [QueryModerationConfigsRequest]
      # @return [Models::QueryModerationConfigsResponse]
      def query_moderation_configs(query_moderation_configs_request)
        path = '/api/v2/moderation/configs'
        # Build request body
        body = query_moderation_configs_request

        # Make the API request
        @client.make_request(
          :post,
          path,
          body: body
        )
      end

      # Custom check, add your own AI model reports to the review queue
      #
      # @param custom_check_request [CustomCheckRequest]
      # @return [Models::CustomCheckResponse]
      def custom_check(custom_check_request)
        path = '/api/v2/moderation/custom_check'
        # Build request body
        body = custom_check_request

        # Make the API request
        @client.make_request(
          :post,
          path,
          body: body
        )
      end

      # Delete a specific moderation template by its name
      #
      # @return [Models::DeleteModerationTemplateResponse]
      def v2_delete_template()
        path = '/api/v2/moderation/feeds_moderation_template'

        # Make the API request
        @client.make_request(
          :delete,
          path
        )
      end

      # Retrieve a list of feed moderation templates that define preset moderation rules and configurations. Limited to 100 templates per request.
      #
      # @return [Models::QueryFeedModerationTemplatesResponse]
      def v2_query_templates()
        path = '/api/v2/moderation/feeds_moderation_template'

        # Make the API request
        @client.make_request(
          :get,
          path
        )
      end

      # Upsert feeds template for moderation
      #
      # @param upsert_moderation_template_request [UpsertModerationTemplateRequest]
      # @return [Models::UpsertModerationTemplateResponse]
      def v2_upsert_template(upsert_moderation_template_request)
        path = '/api/v2/moderation/feeds_moderation_template'
        # Build request body
        body = upsert_moderation_template_request

        # Make the API request
        @client.make_request(
          :post,
          path,
          body: body
        )
      end

      # Flag any type of content (messages, users, channels, activities) for moderation review. Supports custom content types and additional metadata for flagged content.
      #
      # @param flag_request [FlagRequest]
      # @return [Models::FlagResponse]
      def flag(flag_request)
        path = '/api/v2/moderation/flag'
        # Build request body
        body = flag_request

        # Make the API request
        @client.make_request(
          :post,
          path,
          body: body
        )
      end

      # Query flags associated with moderation items. This is used for building a moderation dashboard.
      #
      # @param query_moderation_flags_request [QueryModerationFlagsRequest]
      # @return [Models::QueryModerationFlagsResponse]
      def query_moderation_flags(query_moderation_flags_request)
        path = '/api/v2/moderation/flags'
        # Build request body
        body = query_moderation_flags_request

        # Make the API request
        @client.make_request(
          :post,
          path,
          body: body
        )
      end

      # Search and filter moderation action logs with support for pagination. View the history of moderation actions taken, including who performed them and when.
      #
      # @param query_moderation_logs_request [QueryModerationLogsRequest]
      # @return [Models::QueryModerationLogsResponse]
      def query_moderation_logs(query_moderation_logs_request)
        path = '/api/v2/moderation/logs'
        # Build request body
        body = query_moderation_logs_request

        # Make the API request
        @client.make_request(
          :post,
          path,
          body: body
        )
      end

      # Create or update a moderation rule that can apply app-wide or to specific moderation configs
      #
      # @param upsert_moderation_rule_request [UpsertModerationRuleRequest]
      # @return [Models::UpsertModerationRuleResponse]
      def upsert_moderation_rule(upsert_moderation_rule_request)
        path = '/api/v2/moderation/moderation_rule'
        # Build request body
        body = upsert_moderation_rule_request

        # Make the API request
        @client.make_request(
          :post,
          path,
          body: body
        )
      end

      # Delete an existing moderation rule
      #
      # @return [Models::DeleteModerationRuleResponse]
      def delete_moderation_rule()
        path = '/api/v2/moderation/moderation_rule/{id}'

        # Make the API request
        @client.make_request(
          :delete,
          path
        )
      end

      # Get a specific moderation rule by ID
      #
      # @return [Models::GetModerationRuleResponse]
      def get_moderation_rule()
        path = '/api/v2/moderation/moderation_rule/{id}'

        # Make the API request
        @client.make_request(
          :get,
          path
        )
      end

      # Search and filter moderation rules across your application. This endpoint is designed for building moderation dashboards and managing multiple rule sets.
      #
      # @param query_moderation_rules_request [QueryModerationRulesRequest]
      # @return [Models::QueryModerationRulesResponse]
      def query_moderation_rules(query_moderation_rules_request)
        path = '/api/v2/moderation/moderation_rules'
        # Build request body
        body = query_moderation_rules_request

        # Make the API request
        @client.make_request(
          :post,
          path,
          body: body
        )
      end

      # Mute a user. Mutes are generally not visible to the user you mute, while block is something you notice.
      #
      # @param mute_request [MuteRequest]
      # @return [Models::MuteResponse]
      def mute(mute_request)
        path = '/api/v2/moderation/mute'
        # Build request body
        body = mute_request

        # Make the API request
        @client.make_request(
          :post,
          path,
          body: body
        )
      end

      # Query review queue items allows you to filter the review queue items. This is used for building a moderation dashboard.
      #
      # @param query_review_queue_request [QueryReviewQueueRequest]
      # @return [Models::QueryReviewQueueResponse]
      def query_review_queue(query_review_queue_request)
        path = '/api/v2/moderation/review_queue'
        # Build request body
        body = query_review_queue_request

        # Make the API request
        @client.make_request(
          :post,
          path,
          body: body
        )
      end

      # Retrieve a specific review queue item by its ID
      #
      # @param _id [String]
      # @return [Models::GetReviewQueueItemResponse]
      def get_review_queue_item(_id)
        path = '/api/v2/moderation/review_queue/{id}'
        # Replace path parameters
        path = path.gsub('{id}', _id.to_s)

        # Make the API request
        @client.make_request(
          :get,
          path
        )
      end

      # Take action on flagged content, such as marking content as safe, deleting content, banning users, or executing custom moderation actions. Supports various action types with configurable parameters.
      #
      # @param submit_action_request [SubmitActionRequest]
      # @return [Models::SubmitActionResponse]
      def submit_action(submit_action_request)
        path = '/api/v2/moderation/submit_action'
        # Build request body
        body = submit_action_request

        # Make the API request
        @client.make_request(
          :post,
          path,
          body: body
        )
      end

      # Unban a user from a channel or globally.
      #
      # @param unban_request [UnbanRequest]
      # @param target_user_id [String]
      # @param channel_cid [String]
      # @param created_by [String]
      # @return [Models::UnbanResponse]
      def unban(unban_request, target_user_id, channel_cid = nil, created_by = nil)
        path = '/api/v2/moderation/unban'
        # Build query parameters
        query_params = {}
        query_params['target_user_id'] = target_user_id unless target_user_id.nil?
        query_params['channel_cid'] = channel_cid unless channel_cid.nil?
        query_params['created_by'] = created_by unless created_by.nil?
        # Build request body
        body = unban_request

        # Make the API request
        @client.make_request(
          :post,
          path,
          query_params: query_params,
          body: body
        )
      end

      # Unmute a user
      #
      # @param unmute_request [UnmuteRequest]
      # @return [Models::UnmuteResponse]
      def unmute(unmute_request)
        path = '/api/v2/moderation/unmute'
        # Build request body
        body = unmute_request

        # Make the API request
        @client.make_request(
          :post,
          path,
          body: body
        )
      end

    end
  end
end