name: Release PR

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      release_notes:
        description: 'Release notes (optional)'
        required: false
        type: string
  push:
    branches: [ main, master ]
    paths:
      - 'lib/getstream_ruby/version.rb'
      - 'getstream-ruby.gemspec'

jobs:
  create-release-pr:
    name: Create Release PR
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1.0'
          
      - name: Install dependencies
        run: bundle install --jobs 4 --retry 3

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(ruby -r "./lib/getstream_ruby/version.rb" -e "puts GetStreamRuby::VERSION")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Calculate new version
        id: new_version
        run: |
          CURRENT_VERSION="${{ steps.current_version.outputs.current_version }}"
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
          
          case "${{ github.event.inputs.version_type }}" in
              "major")
                  NEW_VERSION="$((major + 1)).0.0"
                  ;;
              "minor")
                  NEW_VERSION="$major.$((minor + 1)).0"
                  ;;
              "patch")
                  NEW_VERSION="$major.$minor.$((patch + 1))"
                  ;;
          esac
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Create release branch
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          RELEASE_BRANCH="release/v$NEW_VERSION"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git checkout -b "$RELEASE_BRANCH"
          echo "RELEASE_BRANCH=$RELEASE_BRANCH" >> $GITHUB_ENV

      - name: Update version files
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          sed -i "s/VERSION = '[^']*'/VERSION = '$NEW_VERSION'/" "lib/getstream_ruby/version.rb"
          sed -i "s/spec\.version\s*=\s*'[^']*'/spec.version       = '$NEW_VERSION'/" "getstream-ruby.gemspec"

      - name: Update CHANGELOG
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          VERSION_TYPE="${{ github.event.inputs.version_type }}"
          RELEASE_NOTES="${{ github.event.inputs.release_notes }}"
          
          if [ ! -f "CHANGELOG.md" ]; then
            echo "# Changelog" > "CHANGELOG.md"
            echo "" >> "CHANGELOG.md"
            echo "All notable changes to this project will be documented in this file." >> "CHANGELOG.md"
            echo "" >> "CHANGELOG.md"
            echo "The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)," >> "CHANGELOG.md"
            echo "and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html)." >> "CHANGELOG.md"
            echo "" >> "CHANGELOG.md"
          fi
          
          TEMP_FILE=$(mktemp)
          echo "## [$NEW_VERSION] - $(date +%Y-%m-%d)" >> "$TEMP_FILE"
          echo "" >> "$TEMP_FILE"
          
          if [ -n "$RELEASE_NOTES" ]; then
            echo "$RELEASE_NOTES" >> "$TEMP_FILE"
          else
            echo "### $VERSION_TYPE^2 changes" >> "$TEMP_FILE"
            echo "- " >> "$TEMP_FILE"
          fi
          
          echo "" >> "$TEMP_FILE"
          cat "CHANGELOG.md" >> "$TEMP_FILE"
          mv "$TEMP_FILE" "CHANGELOG.md"

      - name: Commit and push changes
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          VERSION_TYPE="${{ github.event.inputs.version_type }}"
          RELEASE_NOTES="${{ github.event.inputs.release_notes }}"
          
          git add lib/getstream_ruby/version.rb getstream-ruby.gemspec CHANGELOG.md
          git commit -m "Bump version to $NEW_VERSION

          Version type: $VERSION_TYPE
          Release notes: ${RELEASE_NOTES:-'Standard $VERSION_TYPE release'}"
          
          git push -u origin "$RELEASE_BRANCH"

      - name: Create Pull Request
        uses: actions/github-script@v7
        with:
          script: |
            const NEW_VERSION = '${{ steps.new_version.outputs.new_version }}';
            const VERSION_TYPE = '${{ github.event.inputs.version_type }}';
            const RELEASE_NOTES = '${{ github.event.inputs.release_notes }}';
            const RELEASE_BRANCH = '${{ env.RELEASE_BRANCH }}';
            
            const pr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Release v${NEW_VERSION}`,
              head: RELEASE_BRANCH,
              base: 'master',
              body: `## Release v${NEW_VERSION}
              
              **Version Type:** ${VERSION_TYPE}
              
              **Release Notes:**
              ${RELEASE_NOTES || 'Standard ' + VERSION_TYPE + ' release'}
              
              This PR will automatically create a release when merged.
              
              ### Changes
              - [x] Bumped version to ${NEW_VERSION}
              - [x] Updated CHANGELOG.md
              - [x] Updated gemspec
              
              **⚠️ Only repository admins should merge this PR**`
            });

  release:
    name: Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1.0'
          
      - name: Install dependencies
        run: bundle install --jobs 4 --retry 3

      - name: Get version
        id: version
        run: |
          VERSION=$(ruby -r "./lib/getstream_ruby/version.rb" -e "puts GetStreamRuby::VERSION")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Run tests
        run: make test

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: Release v${{ steps.version.outputs.version }}
          body: |
            ## Changes in v${{ steps.version.outputs.version }}
            
            See CHANGELOG.md for details.
          draft: false
          prerelease: false

      - name: Build and publish gem
        env:
          RUBYGEMS_API_KEY: ${{ secrets.RUBYGEMS_API_KEY }}
        run: |
          gem build getstream-ruby.gemspec
          gem push getstream-ruby-${{ steps.version.outputs.version }}.gem